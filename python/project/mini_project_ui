# 축구 리그 관리 프로그램.
# 입력 팀의 수, 경기 수
# 출력이 총 경기 수, 승, 무, 패, 득실, 득실차, 승점.
# 만약 득실차랑 승점이 모두 같다면 가위바위보로 공정하게.     모두 gui로 구현.
# 시즌별로 팀 이름을 저장 시켜놓기.
# 시즌별로 경기 결과 볼 수 있게.

# 자료구조  필수
# 알고리즘  필수

import sys
import os
from PyQt5.QtWidgets import QMainWindow, QApplication, QLabel, QWidget
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt
from PyQt5 import uic

sys.path.append(os.path.abspath("C:\\yeonjun\\파이썬\\python\\project"))
from project.mini_project_main import league_start

# UI 파일 연결
form_class_main = uic.loadUiType("C:\yeonjun\파이썬\python\project\main\main.ui")[0]
from_class_start = uic.loadUiType("C:\yeonjun\파이썬\python\project\main\start.ui")[0]
from_class_statistics = uic.loadUiType("C:\yeonjun\파이썬\python\project\main\Statistics.ui")[0]

# 화면을 띄우는데 사용되는 클래스 선언
class WindowClass(QMainWindow, form_class_main):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.set_images()
        self.Exit_Button.clicked.connect(self.exiteFunction)
        self.Start_Button.clicked.connect(self.startFunction)

    def set_images(self):
        # QLabel의 크기 가져오기
        label_width = self.Main_Pix.width()
        label_height = self.Main_Pix.height()

        # QPixmap 객체 생성 및 이미지 로드
        pixmapMainPix = QPixmap("C:\yeonjun\파이썬\python\project\main\Main.png")

        # 이미지를 레이블 크기에 맞게 조정
        pixmapMainPix = pixmapMainPix.scaled(label_width, label_height, Qt.KeepAspectRatio)

        # QLabel 생성 및 이미지 설정
        self.Main_Pix.setPixmap(pixmapMainPix)

    def exiteFunction(self) : # 프로그램 종료
        exit(0)
    
    def startFunction(self) :
        self.close()  # 현재 창 닫기
        self.new_window = WindowClass_1()  # 두 번째 창 생성
        self.new_window.show()  # 두 번째 창 표시

class WindowClass_1(QMainWindow, from_class_start):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.set_images()
        self.Start_Button.clicked.connect(self.startFunction)
        self.Start2_Button.clicked.connect(self.reloadFunction)
        self.Start3_Button.clicked.connect(self.statusFunction)
        self.Start4_Button.clicked.connect(self.backFunction)

    def set_images(self):
        # QLabel의 크기 가져오기
        label_width = self.Main_Pix.width()
        label_height = self.Main_Pix.height()

        # QPixmap 객체 생성 및 이미지 로드
        pixmapStartPix = QPixmap("C:\\yeonjun\\파이썬\\python\\project\\main\\Main.png")

        # 이미지를 레이블 크기에 맞게 조정
        pixmapStartPix = pixmapStartPix.scaled(label_width, label_height, Qt.KeepAspectRatio)

        # QLabel 생성 및 이미지 설정
        self.Main_Pix.setPixmap(pixmapStartPix)

    def startFunction(self) :
        
    def reloadFunction(self) :
        
    def statusFunction(self) :
        
    def backFunction(self) :
        self.close()  # 현재 창 닫기
        self.new_window = WindowClass()  # 두 번째 창 생성
        self.new_window.show()
    
class WindowClass_2(QMainWindow, from_class_statistics):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.set_images()
        self.Start_Button.clicked.connect(self.startFunction)
        self.Start2_Button.clicked.connect(self.reloadFunction)
        self.Start3_Button.clicked.connect(self.statusFunction)
        self.Start4_Button.clicked.connect(self.backFunction)

    def set_images(self):
        # QLabel의 크기 가져오기
        label_width = self.Main_Pix.width()
        label_height = self.Main_Pix.height()

        # QPixmap 객체 생성 및 이미지 로드
        pixmapStartPix = QPixmap("C:\\yeonjun\\파이썬\\python\\project\\main\\Main.png")

        # 이미지를 레이블 크기에 맞게 조정
        pixmapStartPix = pixmapStartPix.scaled(label_width, label_height, Qt.KeepAspectRatio)

        # QLabel 생성 및 이미지 설정
        self.Main_Pix.setPixmap(pixmapStartPix)   

if __name__ == "__main__":
    # QApplication : 프로그램을 실행시켜주는 클래스
    app = QApplication(sys.argv) 

    # WindowClass의 인스턴스 생성
    myWindow = WindowClass() 

    # 프로그램 화면을 보여주는 코드
    myWindow.show()

    # 프로그램을 이벤트 루프로 진입시키는(프로그램을 작동시키는) 코드
    sys.exit(app.exec_())
